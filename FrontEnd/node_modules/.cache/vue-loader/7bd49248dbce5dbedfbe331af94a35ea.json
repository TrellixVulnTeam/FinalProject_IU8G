{"remainingRequest":"C:\\Users\\Tali\\visualStudioCode\\FinalProject\\FrontEnd\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Tali\\visualStudioCode\\FinalProject\\FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Tali\\visualStudioCode\\FinalProject\\FrontEnd\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Tali\\visualStudioCode\\FinalProject\\FrontEnd\\src\\components\\registerPage.vue?vue&type=template&id=a13dda3c&scoped=true&","dependencies":[{"path":"C:\\Users\\Tali\\visualStudioCode\\FinalProject\\FrontEnd\\src\\components\\registerPage.vue","mtime":1606294416391},{"path":"C:\\Users\\Tali\\visualStudioCode\\FinalProject\\FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Tali\\visualStudioCode\\FinalProject\\FrontEnd\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Tali\\visualStudioCode\\FinalProject\\FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Tali\\visualStudioCode\\FinalProject\\FrontEnd\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}