{"remainingRequest":"C:\\Users\\User\\Documents\\GitHub\\FinalProject\\FrontEnd\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Documents\\GitHub\\FinalProject\\FrontEnd\\src\\pages\\gamePage.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\User\\Documents\\GitHub\\FinalProject\\FrontEnd\\src\\pages\\gamePage.vue","mtime":1623161579563},{"path":"C:\\Users\\User\\Documents\\GitHub\\FinalProject\\FrontEnd\\node_modules\\css-loader\\dist\\cjs.js","mtime":1619698968439},{"path":"C:\\Users\\User\\Documents\\GitHub\\FinalProject\\FrontEnd\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1619698986297},{"path":"C:\\Users\\User\\Documents\\GitHub\\FinalProject\\FrontEnd\\node_modules\\postcss-loader\\src\\index.js","mtime":1619698974988},{"path":"C:\\Users\\User\\Documents\\GitHub\\FinalProject\\FrontEnd\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1619698978214},{"path":"C:\\Users\\User\\Documents\\GitHub\\FinalProject\\FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1619698966213},{"path":"C:\\Users\\User\\Documents\\GitHub\\FinalProject\\FrontEnd\\node_modules\\vue-loader\\lib\\index.js","mtime":1619698986297}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouZC1mbGV4IHsNCiAgZGlzcGxheTogZmxleDsNCn0NCi5mbGV4LXJvdyB7DQogIGZsZXgtZGlyZWN0aW9uOiByb3c7DQp9DQouZmxleC1jb2x1bW4gew0KICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KfQ0KLmp1c3RpZnktY2VudGVyIHsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQp9DQouYWxpZ24tY2VudGVyIHsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCn0NCi53LTEwNDAgew0KICBtYXgtd2lkdGg6IDEwNDBweDsNCn0NCi5tdC0yMCB7DQogIG1hcmdpbi10b3A6IDEwcHg7DQp9DQoubXQtMjUgew0KICBtYXJnaW4tdG9wOiAxMHB4Ow0KfQ0KcHJlIHsNCiAgY291bnRlci1yZXNldDogbGluZS1udW1iZXJpbmc7DQogIGJhY2tncm91bmQ6ICMyYzNlNTA7DQogIHBhZGRpbmc6IDEycHggMHB4IDE0cHggMDsNCiAgd2lkdGg6IDYwMHB4Ow0KICBjb2xvcjogI2VjZjBmMTsNCiAgbGluZS1oZWlnaHQ6IDEwMCU7DQp9DQpwcmUgY29kZSAubGluZTo6YmVmb3JlIHsNCiAgY29udGVudDogY291bnRlcihsaW5lLW51bWJlcmluZyk7DQogIGNvdW50ZXItaW5jcmVtZW50OiBsaW5lLW51bWJlcmluZzsNCiAgcGFkZGluZy1yaWdodDogMWVtOw0KICAvKiBzcGFjZSBhZnRlciBudW1iZXJzICovDQogIHBhZGRpbmctbGVmdDogOHB4Ow0KICB3aWR0aDogMS41ZW07DQogIHRleHQtYWxpZ246IHJpZ2h0Ow0KICBvcGFjaXR5OiAwLjU7DQogIGNvbG9yOiB3aGl0ZTsNCn0NCg0KLml0ZW0gew0KICBtYXJnaW46IDVweCAhaW1wb3J0YW50Ow0KICBoZWlnaHQ6IDIyMHB4ICFpbXBvcnRhbnQ7DQogIHdpZHRoOiAyNTBweCAhaW1wb3J0YW50Ow0KICB0b3A6IDEwcHggIWltcG9ydGFudDsNCiAgbGVmdDogMTBweCAhaW1wb3J0YW50Ow0KfQ0KDQouaXRlbSAuaXNTZWxlY3RlZEJveCB7DQogIHRvcDogMTBweCAhaW1wb3J0YW50Ow0KICBsZWZ0OiAxMHB4ICFpbXBvcnRhbnQ7DQp9DQoNCi5zd2FsMi1jb25maXJtIC5zd2FsMi1zdHlsZWQgLmJ1dHRvbnsNCiAgd2lkdGg6IDIwcHggIWltcG9ydGFudDsNCiAgaGVpZ2h0OiAzMHB4ICFpbXBvcnRhbnQ7DQp9DQouY29udGFpbmVyIHsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogMTAwJTsNCn0NCi5mYWRlLWVudGVyLWFjdGl2ZSwNCi5mYWRlLWxlYXZlLWFjdGl2ZSB7DQogICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzOw0KfQ0KLmZhZGUtZW50ZXIsDQouZmFkZS1sZWF2ZS10byB7DQogICAgb3BhY2l0eTogMDsNCn0NCg0KLnBvcHVwLW1vZGFsIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7DQogICAgcG9zaXRpb246IGZpeGVkOw0KICAgIHRvcDogMDsNCiAgICBib3R0b206IDA7DQogICAgbGVmdDogMDsNCiAgICByaWdodDogMDsNCiAgICBtYXJnaW4tYm90dG9tOiAwcHg7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIHotaW5kZXg6IDE7DQoNCn0NCg0KLndpbmRvdyB7DQogICBib3gtc2hhZG93OiAycHggNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMik7DQogICAgbWF4LXdpZHRoOiA4MCU7DQogICAgLy9tYXgtaGVpZ2h0OiAxNTAwcHg7DQogICAgbWFyZ2luLWxlZnQ6IGF1dG87DQogICAgbWFyZ2luLXJpZ2h0OiBhdXRvOw0KICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgYWxpZ24taXRlbXM6Y2VudGVyOw0KICAgIHRleHQtYWxpZ246IHJpZ2h0Ow0KICAgIGNvbG9yOiBibGFjazsNCiAgICAgIG1hcmdpbjogYXV0bzsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KICBib3JkZXI6IDNweCBzb2xpZCByZ2JhKDE0MywgMjQxLCAyMTYsIDAuODcpOw0KIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgcGFkZGluZzogMS4xcmVtOw0KICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1MSwgMjQxLCAyMjYsIDAuODk3KTsNCn0NCi5iLWdhbWUgew0KICAgIGZvbnQtc2l6ZTogbGFyZ2U7DQogICAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmOw0KICAgIGNvbG9yOiBibGFjazsNCg0KfQ0KLmJ1dHRvbiB7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGZvbnQtc2l6ZTogMjVweDsNCiAgICB3aWR0aDogMzAwcHg7DQogICAgbWFyZ2luLWxlZnQ6IDEwMHB4DQp9DQoNCi5idG4gew0KICBtYXJnaW4tdG9wOiA4cHg7DQp9DQoudGl0bGVnYW1lIHsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmOw0KICAgIGNvbG9yOiBibGFjazsNCn0NCg0KLnRleHRnYW1lIHsNCg0KICAgIGZvbnQtc2l6ZTogbGFyZ2U7DQogICAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmOw0KICAgIHRleHQtYWxpZ246IHJpZ2h0Ow0KICAgIGNvbG9yOiBibGFjazsNCg0KfQ0KLmJ0bi14IHsNCiAgd2lkdGg6NyU7DQogIG1hcmdpbi10b3A6IDElOw0KICBtYXJnaW4tcmlnaHQ6IDIlOw0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHRvcDogMDsNCiAgcmlnaHQ6IDA7DQp9DQoNCg0K"},{"version":3,"sources":["gamePage.vue"],"names":[],"mappingsfile":"gamePage.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n\r\n   \r\n  <div class=\"d-flex flex-column justify-center align-center\">\r\n    <transition name=\"fade\">\r\n\r\n        <div class=\"popup-modal\" v-if=\"isVisible\">\r\n            <div class=\"window\" style=\" height:450px; max-width: 680px;\">\r\n                <slot>   \r\n                      <!-- <button class=\"btn-x\"  tag=\"b-nav-item\" @click=\"close()\">\r\n                            X\r\n                        </button> -->\r\n                <h2 class=\"titlegame\" >הגענו לשלב המשחק</h2>\r\n\r\n                <p class=\"textgame\" style=\"color: black; direction: RTL; \">\r\n                   כעת נציג לפניכם {{this.$root.store.numberOfScreensInGame}} מסכים. בכל מסך יהיו {{this.$root.store.numberOfImagesInGame}} תמונות מוקטנות אשר לקוחות מהתמונות שראיתם בשלב הקודם.\r\n                   מתוך {{this.$root.store.numberOfImagesInGame}} התמונות עליכם יהיה לבחור את {{this.$root.store.limitSelectInGame}} התמונות שאתם הכי אוהבים. המטרה בכל מסך היא לבחור את {{this.$root.store.limitSelectInGame}} התמונות\r\n                   שקיבלו את הציונים הגבוהים ביותר בשלב דירוג התמונות.\r\n                   <br/><br/>\r\n                   עבור כל תמונה שבחרתם נכון תקבלו נקודה. כמו כן, ניתן לבטל בחירה של תמונה \r\n                   מסוימת על ידי לחיצה נוספת עליה.\r\n                </p>\r\n                <h3 class=\"titlegame\" >!בהצלחה</h3>\r\n                <br>\r\n                <b-row>\r\n                  <b-col ></b-col>\r\n                    <b-col ><b-button size=\"lg\" class=\"b-game\" block @click=\"close()\">התחל</b-button></b-col>\r\n                  <b-col></b-col>\r\n                </b-row>\r\n                \r\n                </slot>\r\n                    </div>\r\n                </div>\r\n            </transition>\r\n\r\n    <br/>\r\n\r\n          <router-link to=\"/\" >\r\n          <b-button color=\"primary\" class=\"btn-x\">\r\n         HOME\r\n          </b-button>\r\n        </router-link> <h3> <b>Page {{ screenNum }} / {{ screens }}</b></h3>\r\n    <div class=\"d-flex flex-row justify-center align-center\">\r\n      <v-select-image ref=\"VSelectImage\"\r\n        class=\"w-1040\"\r\n        v-model=\"selectedItems\"\r\n        :items=\"items\"\r\n        :colorSchema=\"colorSchema\"\r\n        :h=\"100\"\r\n        uniqueKey=\"key\"\r\n        :maxSelectable=\"maxSelectable\"\r\n        @maxSelectionError=\"maxSelected()\"\r\n      />\r\n      \r\n    </div>\r\n    <br>\r\n    <b-button size=\"lg\" class=\"btn\"\r\n              v-on:click=\"save\"\r\n              type=\"submit\" >\r\n    NEXT\r\n    </b-button>\r\n  </div>\r\n  \r\n</template>\r\n\r\n<script>\r\nimport VSelectImage from \"../components/VSelectImage.vue\";\r\nexport default {\r\n  name: \"App\",\r\n  components: { 'v-select-image': VSelectImage },\r\n  methods: {\r\n    open() {\r\n            this.isVisible = true\r\n        },\r\n\r\n        close() {\r\n            this.isVisible = false\r\n        },\r\n    maxSelected() {\r\n      this.$alert(\"You can't select more than \" + this.maxSelectable + \" images.\" ,\r\n      \"Error\", \"error\");\r\n    },\r\n    async save(){\r\n      if(this.selectedItems.length < this.maxSelectable)\r\n        this.$alert(\"You need to select \" + this.maxSelectable + \" images\" ,\r\n      \"Error\", \"error\");\r\n      else{\r\n        let scoreScreen = 0;\r\n        let imagesSelect = '';\r\n        for(let index in this.selectedItems){\r\n          if(this.selectedItems[index].target == true)\r\n            scoreScreen++;\r\n          imagesSelect = imagesSelect + this.selectedItems[index].key + ','; \r\n        }\r\n        this.score = this.score + scoreScreen;\r\n        let saveScore;\r\n        \r\n        try {\r\n          saveScore = await this.axios.get(\r\n          this.$root.store.base_url +\r\n              \"/users/saveScoreScreen/gameID/\"+this.gameID+\r\n              \"/numOfScreen/\"+this.screenNum+\"/imagesSelect/\"+imagesSelect+\r\n              \"/score/\" + scoreScreen\r\n          );\r\n          if (saveScore.status !== 200) this.$router.replace(\"/NotFound\");\r\n          } catch (error) {\r\n              console.log(\"error.saveScore.status\", error.saveScore.status);\r\n              this.$router.replace(\"/NotFound\");\r\n              return;\r\n          }\r\n          this.$alert('Your score in this round: ' +scoreScreen + '/' + this.maxSelectable);\r\n          if(this.screenNum == this.screens){\r\n            let saveScoreGame;\r\n        try {\r\n          saveScoreGame = await this.axios.get(\r\n          this.$root.store.base_url +\r\n              \"/users/saveScoreGame/gameID/\"+this.gameID+\"/score/\"+this.score\r\n          );\r\n          if (saveScoreGame.status !== 200) this.$router.replace(\"/NotFound\");\r\n          } catch (error) {\r\n              console.log(\"error.saveScoreGame.status\", error.saveScoreGame.status);\r\n              this.$router.replace(\"/NotFound\");\r\n              return;\r\n          }\r\n            this.$alert('Game Over! You earned '+ this.score+' points today. See you tommorow!');\r\n            this.$router.push(\"/\");\r\n\r\n          }\r\n          else{\r\n            this.screenNum++;\r\n            // this.$root.$children[0].clear();\r\n            this.$refs.VSelectImage.clear();\r\n            this.items =[];\r\n            for(let num in this.allImages[this.index].imagesScreen){\r\n              const data = {key: this.allImages[this.index].imagesScreen[num].image_id,\r\n                            backgroundImage: this.allImages[this.index].imagesScreen[num].image,\r\n                            target: this.allImages[this.index].imagesScreen[num].target,\r\n                            selectable: true};\r\n              this.items.push(data);\r\n            }\r\n            this.index++;\r\n          }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isVisible: true,\r\n\r\n      maxSelectable: 2,\r\n      selectedItems: [],\r\n      items: [],\r\n      colorSchema: \"#00cc44\",\r\n      screenNum: 1,\r\n      screens: '',\r\n      score: 0, \r\n      gameID: '',\r\n      allImages: [],\r\n      index: ''\r\n    };\r\n  },\r\n  watch: {\r\n    maxSelectable(newVal, oldVal) {\r\n      if (newVal < this.selectedItems.length) {\r\n        this.maxSelectable = oldVal;\r\n      }\r\n      if (this.items.length < newVal) {\r\n        this.maxSelectable = oldVal;\r\n      }\r\n    },\r\n  },\r\n  async created() {\r\n      if(this.$root.store.email){\r\n        if(this.$root.store.numberOfImagesRating < this.$root.store.minImagesRating){\r\n          this.$alert(\"You did not rate enough photos, please continue to rate...\" ,\r\n      \"Error\", \"error\");\r\n          this.$router.push(\"/ranking\");\r\n        }\r\n        else{\r\n            let playToday;\r\n            try {\r\n                playToday = await this.axios.get(\r\n                this.$root.store.base_url +\r\n                    \"/users/checkIfPlayToday\"\r\n                );\r\n                if(playToday.status === 201){\r\n                  //not finish to play today\r\n                  if(playToday.data[0].scoreGame == null){\r\n                    this.screens = this.$root.store.numberOfScreensInGame;\r\n                    let response;\r\n                    try {\r\n                      response = await this.axios.get(\r\n                      this.$root.store.base_url +\r\n                          \"/users/getScreensGame/gameId/\"+playToday.data[0].game_id\r\n                      );\r\n                      if (response.status !== 200) this.$router.replace(\"/NotFound\");\r\n                  } catch (error) {\r\n                      console.log(\"error.response.status\", error.response.status);\r\n                      this.$router.replace(\"/NotFound\");\r\n                      return;\r\n                  }\r\n                  this.allImages = response.data;\r\n                  this.gameID = playToday.data[0].game_id;\r\n                  this.screenNum = this.allImages[0].screen;\r\n                  //get score screens\r\n                  if(this.screenNum > 1){\r\n                    let scoreScreens;\r\n                    try {\r\n                      scoreScreens = await this.axios.get(\r\n                      this.$root.store.base_url +\r\n                          \"/users/getScoreScreens/gameId/\"+this.gameID\r\n                      );\r\n                      if (scoreScreens.status !== 200) this.$router.replace(\"/NotFound\");\r\n                  } catch (error) {\r\n                      console.log(\"error.scoreScreens.status\", error.scoreScreens.status);\r\n                      this.$router.replace(\"/NotFound\");\r\n                      return;\r\n                  }\r\n                  this.score = scoreScreens.data[0].score;\r\n                  }\r\n                  for(let num in this.allImages[0].imagesScreen){\r\n                    const data = {key: this.allImages[0].imagesScreen[num].image_id,\r\n                                  backgroundImage: this.allImages[0].imagesScreen[num].image,\r\n                                  target: this.allImages[0].imagesScreen[num].target,\r\n                                  selectable: true};\r\n                    this.items.push(data);\r\n                  }\r\n                  this.index =0;\r\n                  if(this.index + 1 < this.allImages.length)\r\n                    this.index++;\r\n                  }\r\n                  else{\r\n                    this.$alert('You already played today, please come back tomorrow!' ,\r\n      \"Error\", \"error\");\r\n                    this.$router.replace(\"/\")\r\n                  }\r\n                }\r\n                else if (playToday.status !== 200) this.$router.replace(\"/NotFound\");\r\n                else{\r\n                  //not play today\r\n                  const numberOfImages=this.$root.store.numberOfImagesInGame;\r\n                  const limit=this.$root.store.limitSelectInGame;\r\n                  this.screens = this.$root.store.numberOfScreensInGame;\r\n\r\n                  // this.maxSelectable = limit;\r\n                  // this.$emit('maxSelectable', 3);\r\n                  let response;\r\n                  try {\r\n                      response = await this.axios.get(\r\n                      this.$root.store.base_url +\r\n                          \"/users/getImagesForGame/amount/\"+numberOfImages+\"/numOfScreens/\"+\r\n                          this.screens+\"/numOfSelected/\"+limit\r\n                      );\r\n                      if (response.status !== 200) this.$router.replace(\"/NotFound\");\r\n                  } catch (error) {\r\n                      console.log(\"error.response.status\", error.response.status);\r\n                      this.$router.replace(\"/NotFound\");\r\n                      return;\r\n                  }\r\n\r\n                  this.allImages = response.data;\r\n                  this.gameID = this.allImages[this.screens];\r\n                  for(let num in this.allImages[this.screenNum-1].imagesScreen){\r\n                    const data = {key: this.allImages[this.screenNum-1].imagesScreen[num].image_id,\r\n                                  backgroundImage: this.allImages[this.screenNum-1].imagesScreen[num].image,\r\n                                  target: this.allImages[this.screenNum-1].imagesScreen[num].target,\r\n                                  selectable: true};\r\n                    this.items.push(data);\r\n                  }\r\n                  this.index = this.screenNum;\r\n                }\r\n            } catch (error) {\r\n                console.log(\"error.playToday.status\", error.playToday.status);\r\n                this.$router.replace(\"/NotFound\");\r\n                return;\r\n            }\r\n        }\r\n        }\r\n        else{\r\n            this.$router.push(\"/login\");\r\n        }\r\n    },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.d-flex {\r\n  display: flex;\r\n}\r\n.flex-row {\r\n  flex-direction: row;\r\n}\r\n.flex-column {\r\n  flex-direction: column;\r\n}\r\n.justify-center {\r\n  justify-content: center;\r\n}\r\n.align-center {\r\n  align-items: center;\r\n}\r\n.w-1040 {\r\n  max-width: 1040px;\r\n}\r\n.mt-20 {\r\n  margin-top: 10px;\r\n}\r\n.mt-25 {\r\n  margin-top: 10px;\r\n}\r\npre {\r\n  counter-reset: line-numbering;\r\n  background: #2c3e50;\r\n  padding: 12px 0px 14px 0;\r\n  width: 600px;\r\n  color: #ecf0f1;\r\n  line-height: 100%;\r\n}\r\npre code .line::before {\r\n  content: counter(line-numbering);\r\n  counter-increment: line-numbering;\r\n  padding-right: 1em;\r\n  /* space after numbers */\r\n  padding-left: 8px;\r\n  width: 1.5em;\r\n  text-align: right;\r\n  opacity: 0.5;\r\n  color: white;\r\n}\r\n\r\n.item {\r\n  margin: 5px !important;\r\n  height: 220px !important;\r\n  width: 250px !important;\r\n  top: 10px !important;\r\n  left: 10px !important;\r\n}\r\n\r\n.item .isSelectedBox {\r\n  top: 10px !important;\r\n  left: 10px !important;\r\n}\r\n\r\n.swal2-confirm .swal2-styled .button{\r\n  width: 20px !important;\r\n  height: 30px !important;\r\n}\r\n.container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n    transition: opacity 0.3s;\r\n}\r\n.fade-enter,\r\n.fade-leave-to {\r\n    opacity: 0;\r\n}\r\n\r\n.popup-modal {\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    margin-bottom: 0px;\r\n    display: flex;\r\n    align-items: center;\r\n    z-index: 1;\r\n\r\n}\r\n\r\n.window {\r\n   box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.2);\r\n    max-width: 80%;\r\n    //max-height: 1500px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items:center;\r\n    text-align: right;\r\n    color: black;\r\n      margin: auto;\r\n  position: relative;\r\n  border: 3px solid rgba(143, 241, 216, 0.87);\r\n border-radius: 2px;\r\n  padding: 1.1rem;\r\n  background-color: rgba(251, 241, 226, 0.897);\r\n}\r\n.b-game {\r\n    font-size: large;\r\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n    color: black;\r\n\r\n}\r\n.button {\r\n    border-radius: 5px;\r\n    font-size: 25px;\r\n    width: 300px;\r\n    margin-left: 100px\r\n}\r\n\r\n.btn {\r\n  margin-top: 8px;\r\n}\r\n.titlegame {\r\n    text-align: center;\r\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n    color: black;\r\n}\r\n\r\n.textgame {\r\n\r\n    font-size: large;\r\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n    text-align: right;\r\n    color: black;\r\n\r\n}\r\n.btn-x {\r\n  width:7%;\r\n  margin-top: 1%;\r\n  margin-right: 2%;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n}\r\n\r\n\r\n</style>\r\n"]}]}